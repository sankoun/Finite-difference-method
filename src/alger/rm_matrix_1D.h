#ifndef __RM_MATRIX_1D_H__
#define __RM_MATRIX_1D_H__



/*-------------------------------------------------------------------------------------------*/
/*! 
 * In this file we defines the sparse matrix 1D generate by the discretization of domain
 * with the boundary condition 
 !*/
/*-------------------------------------------------------------------------------------------*/


/*-------------------------------------------------------------------------------------------*/

/*! 
 *Loacal headers
 !*/
#include "../model/rm_model.h"

/*-------------------------------------------------------------------------------------------*/




/*!
 * Structure defining the sparse matrix 
 * In general the sparse matrices generated by the boundary conditions of Dirichlet 
 * are symmetrical
 !*/

typedef struct {
  int nrows;          /* Number of rows */
  char *name;         /* Name of matrix */
  double diag0;       /* Principal diagonal */
  double diag1;       /* First and third diagonal */
  double boundary;    /* The boundary condition in matrix */
 
} rm_matrix_1D;
/*------------------------------------------------------------------------------------------*/



/* initialize sparse matrix */
/*!
 * [in]  time      -----------------> pointer to structure time
 * [in]  mesh      -----------------> pointer to structure mesh
 * [in]  model     -----------------> pointer to structure model
 * [out] matrix    -----------------> pointer to structure matrix
 !*/
void
matrix_1D(const rm_time         *time,
	  const rm_mesh_1D      *mesh,
	  const rm_model_1D     *model,
	  const int             boundary,
	  rm_matrix_1D          *matrix);
/*------------------------------------------------------------------------------------------*/


/* return the product matrix vector A.x = y */
/*!
 * [out] vectory ------> corresponding at A.x
 * [in]  vectorx ------> corresponding at vector x
 * [in]  matrix  ------> pointer to structur of sparse matrix
 !*/
void
matrix1D_dot_vector(double                 *vectory,
		    const double           *vectorx,
		    const rm_matrix_1D     *matrix);
/*------------------------------------------------------------------------------------------*/
#endif /* __RM_MATRIX_1D_H__ */
